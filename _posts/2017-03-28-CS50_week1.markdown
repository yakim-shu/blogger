---
title: "【筆記】CS50 - week 1 ( 2019年更新 )"
layout: post
description: ""
category: CS50
image: https://i.imgur.com/Oj53HuS.png
tags: [CS50]
file_name: 2017-03-28-CS50_week1
---

Week 1 主要課程素材 : 

- [課程視頻](https://video.cs50.net/2016/fall/lectures/1){:target="_blank"}
- [課程文檔](http://docs.cs50.net/2016/fall/notes/1/week1.html){:target="_blank"}
- [作業](http://docs.cs50.net/2017/x/psets/1/pset1.html){:target="_blank"}

助教課程：

- [指令碼 - Command Line](https://www.youtube.com/embed/poT5Yd0Ag8I?autoplay=1&rel=0)
- [資料類型 - Data Types](https://www.youtube.com/embed/JFieJW_kZq4?autoplay=1&rel=0)
- [運算邏輯 - Operators](https://www.youtube.com/embed/_FC-8QaaYgs?autoplay=1&rel=0)
- [運算條件式 - Conditional Statements](https://www.youtube.com/embed/kTnp_-nyocs?autoplay=1&rel=0)
- [迴圈 - Loops](https://www.youtube.com/embed/kTnp_-nyocs?autoplay=1&rel=0)

---


> 註：我在 2019 年又重看了一次 2018 年新出的影片，所以內容有些不一樣。 

Week 0 的 pseudocode （虛擬碼）如圖，對於一個懂英文的成年人應該可以了解其中的內容。
![查找電話簿的虛擬碼](https://i.imgur.com/arZyqnz.png)

但要是對一個小朋友說：「請先翻開書的一半」。

他可能連「書」跟「一半」的概念是什麼都還不懂，那要怎麼期待會回應正確的動作呢？語言大部分都很抽象，更何況電腦語言。所以我們要盡可能的把指令描述明確且具體，讓電腦接收到我們的指令時不產生誤解，正確的執行我們下的命令。

Week 1 以一個好玩的實驗開頭，來證明 **指令精準的重要性。**

![三明治鬧劇](https://i.imgur.com/Oj53HuS.png)

實驗是這樣的，David 請兩位同學上台，桌上擺了三組「製作三明治的食材與工具」，讓台下同學發號施命，一個口令一個動作，讓台上的三人執行一個「製作三明治」的動作。

1. 打開麵包袋。（指令不夠精準）
    - 從中間把袋子撕開
    - 乖乖不破壞包裝地打開
2. 把麵包從袋子拿出。（指令不夠精準）
    - 拿兩片吐司出來
    - 拿整包吐司出來
3. 擰開草莓果醬的蓋子。（指令適當、大家都有同樣的解讀）
    - 大家都一樣
4. 拿起奶油刀。（指令不夠精準）
    - 握著刀子底部
    - 握著刀口（嚇！！）
5. .....最後還是做出一個三明治了，但完成品之嚇人，完全可以投稿臉書社團 [婦仇者廚房](https://www.facebook.com/groups/1405416563117881/)（非常舒壓、建議加入）

> 目的是讓大家很清楚的意識到，台上的都是讀到哈佛的高材生，對英文的理解自然沒有問題，但是每個人對指令的解讀還是天差地遠。（當然很大程度是故意搞笑，但不影響理解這個概念）
        
---

## Scratch vs. C

這節開始比較 Week 0 所使用的圖像化 [Scratch](https://zh.wikipedia.org/wiki/Scratch)  轉換成傳統的 [程式語言 C](https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80) 。

什麼？你說上節分明就沒有介紹到 Scratch ，對我懶但你不能跟著懶，請自己點進去 [開始一個專案](https://scratch.mit.edu/projects/editor/?tip_bar=getStarted) 玩玩~

之所以使用 Scratch 當做入門，而不是 C 語言，是因為讓初學者可以專心在邏輯設計上，而不會又出現哪裡有報錯而感到很無力。（像我一開始學程式的時候，就很不解為什麼結束非得要加 `;`）

話說最近在練習 Canvas，引入 CreateJs 實作 [電流急急棒](http://output.jsbin.com/dapakeheqo){:target="_blank"} ，看似很簡單，但還是碰了不少壁，但如果只是想練習寫個小程式，真得有必要熟讀操作文件去實現那些簡單的邏輯嗎？

但再看看網路上找到的 [學校老師做的 scratch 實作電流急急棒](http://blog.ilc.edu.tw/blog/blog/1279/post/83251/590388) ，用圖像化把語言模塊相接在一起，比我那一大篇 js 還要親民多了吧，而且最終成果也比我屌很多哈哈哈哈(我太弱還做不出障礙物)

---

## Hello.c

所有程式教學第一步都要對世界打個招呼！

這是一個最簡單的程式，功能只有：**印出一行 " hello, world "**

在 scratch 裡可以這麼做，很清楚一看就懂

![scratch - hello](http://i.imgur.com/rOTc2nZ.png)

那用C語言寫的話，會是以下這段

```c
#include <stdio.h>
int main(void) // → (黃色塊)小綠旗
{
    printf("hello, world\n"); // → (紫色塊)say
}
```

> `\n` 代表的是「這行文字已經結束了」的表示符號。 

---

## if else

``if else`` 也是程式語言中共通的判斷式，以下圖為例：

1. ``if`` 括號內的內容如果正確，就執行對應 ``{ }`` 裡的內容，
2. 反之，如果錯誤了，會尋找 ``else if`` 括號內容，正確就執行對應 ``{ }`` 內容，
3. 如果都沒找到，執行 ``else`` 對應的 ``{ }`` 內容。


![ifelse](http://i.imgur.com/Q0Js45s.png)

1. x 為 1, y 為 2
    - 會輸出 "x is less than y"
2. x 為 2, y 為 1
    - 會輸出 "x is greater than y"
3. x 為 1, y 為 1
    - 會輸出 "x is equal to y"

---
    
這邊 David 提出一點思考，在第三個判斷式中，我們需不需要寫成 `else if ( x == y )`?

從比較兩個數字大小的動作中，我們知道只會得到三種結果，大於、小於跟等於。
也就是說，前面已經比較完大於跟小於，最後剩下的只有 *等於* 這個結果，那到底需不需要寫呢？

### 寫下的優點

程式非常的明確好懂。

因為這是個很簡單、大家都可以輕易理解，所以並沒有太大問題。
但要是今天換成一個複雜的判斷，或者是只有你懂的情況，接手同事可能會感到很困擾。

### 寫下的缺點

電腦多了一層判斷。

就算現在電腦的速度跑非常快，就算多了這一行判斷的時間，也快到你察覺不了。
但如果平常沒有維持好習慣，努力縮小這些不必要的判斷時間，在你寫出成千甚至上萬行的程序後，會漸漸體會到這些差異。
    

---

## loops

前面是 **說一次** "hello, world"，現在來試試 **不斷地說** "hello, world"

實現循環在程式語言中叫做 **loops**

![while](http://i.imgur.com/RYiOz7n.png)

上圖右邊的程式碼就是說，當 ``while`` **括號內容** 為真 (true)，就會不斷執行大括號 ``{ }`` 裡的內容

```c
while (true) // → 括號內容為 true
{
    // 不斷地運作這裡的程式碼
}
```


---

懂得 **不斷地** 說 `hello, world`，那要是想要做 **有限次數** 的循環呢?

說 100 次、 50 次、 2 次 `hello, world`，這時候就可以用 for loops

``for`` 後括號內容為：``(起始值; 條件式; 更新值)``

![for loop](http://i.imgur.com/9KzDQGN.png)

迴圈順序如下：

1. 設定變數 i 為 0 **( 起始值 )**
2. 檢查 i 是否在 50 以內 **( 條件式 )**，要是不成立就跳出迴圈**( 步驟6. )**
3. 說一次 hello, world **( 執行 ``{ }`` 內容 )**
4. i + 1 **( 更新值 )**
5. 回到 **( 步驟 2. )**
6. 結束迴圈

```c
for (var i = 0; i < 50; i++) // 當i小於50，就繼續執行
{
    // 執行50次這裡的程式碼
    printf("hello, world\n");
}
```
